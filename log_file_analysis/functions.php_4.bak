<?php

function get_player_list($db,$uniqueGameID) {

	// player_list:
	// 0 --> seat
	// 1 --> player name
	// 2 --> ranking
	// 3 --> max hand id
	// 4 --> start cash last hand
	// 5 --> player sits out
	// 6 --> player wins game
	// 7 --> eliminated by (player name) / winner: winning hand

	$query = "
		SELECT *
		FROM (
			SELECT Player, Seat, HandID, LastCash
			FROM (
				SELECT *
				FROM player
				WHERE UniqueGameID=".$uniqueGameID."
			) NATURAL JOIN (";
			for($i=1;$i<=10;$i++) {
				$query = $query."SELECT max(HandID) as HandID, ".$i." as Seat, Seat_".$i."_Cash as LastCash FROM hand WHERE UniqueGameID=".$uniqueGameID." AND Seat_".$i."_Cash NOT NULL";
				if($i<10) $query = $query." UNION ";
			}
			$query = $query.")
		)
		NATURAL LEFT JOIN (
			SELECT HandID, Player as WinnerSeat
			FROM action
			WHERE UniqueGameID=".$uniqueGameID." AND Action='wins'
		)
		NATURAL LEFT JOIN (
			SELECT Seat as WinnerSeat, Player as WinnerPlayer
			FROM player
			WHERE UniqueGameID=".$uniqueGameID."
		)
		WHERE Seat IS NOT NULL ORDER By Seat";
	$query = $db->prepare($query);
	$query->execute();
	
	$player_list = array();

	$seat_ctr = 0;
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10 & is_numeric($row['HandID']) & $row['HandID']>0 & is_numeric($row['LastCash']) & $row['LastCash'] > 0) {
			$new_player = false;
			if($seat_ctr>0) {
				if( $row['Seat']!=$player_list[0][$seat_ctr-1] ) {
					$new_player = true;
				}
			}
			
			if( $seat_ctr==0 | $new_player ) {
				$player_list[0][$seat_ctr] = $row['Seat'];
	//			$player_list[1][$seat_ctr] = preg_replace($regex,'',$row['Player']);
				$player_list[1][$seat_ctr] = replace_spec_char($row['Player']);
				$player_list[3][$seat_ctr] = $row['HandID'];
				$player_list[4][$seat_ctr] = $row['LastCash'];
				$player_list[5][$seat_ctr] = 0;
				$player_list[6][$seat_ctr] = 0;
				if(!is_null($row['WinnerPlayer'])) {
					$player_list[7][$seat_ctr][] = replace_spec_char($row['WinnerPlayer']);
				} else {
					$player_list[7][$seat_ctr] = array();
				}
				$seat_ctr++;
			} else {
				if(!is_null($row['WinnerPlayer'])) {
					$player_list[7][$seat_ctr][] = replace_spec_char($row['WinnerPlayer']);
				}
			}
		}
	}
	
// 	$query = "
// 		SELECT Player, Seat, Max_ActionID, Max_HandID
// 		FROM (
// 			SELECT *
// 			FROM player
// 			WHERE UniqueGameID=".$uniqueGameID."
// 		)
// 		NATURAL LEFT JOIN (
// 			SELECT Player as Seat, MAX(ActionID) as Max_ActionID, MAX(HandID) as Max_HandID
// 				FROM action
// 				WHERE Action<>'is game admin now' AND Action<>'shows' AND Action<>'has left the game' AND Action<>'was kicked from the game' AND UniqueGameID=".$uniqueGameID."
// 				GROUP BY Player
// 		)
// 		ORDER BY Seat";
// 	$query = $db->prepare($query);
// 	$query->execute();
// 	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
// 		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10 & is_numeric($row['Max_ActionID']) & $row['Max_ActionID']>0 & is_numeric($row['Max_HandID']) & $row['Max_HandID']>0 ) {
// 			$player_list[0][] = $row['Seat'];
// 			$player_list[1][] = preg_replace($regex,'',$row['Player']);
// 			$player_list[3][] = $row['Max_ActionID'];
// 			$player_list[4][] = $row['Max_HandID'];
// 		}
// 	}
	
// 	for($i=0;$i<count($player_list[0]);$i++) {
// 		$query = "
// 			SELECT max(HandID), Seat_".($i+1)."_Cash as Cash
// 			FROM Hand
// 			WHERE UniqueGameID=".$uniqueGameID." AND Seat_".($i+1)."_Cash NOT NULL";
// 		$query = $db->prepare($query);
// 		$query->execute();
// 		if($row = $query->fetch(PDO::FETCH_ASSOC)) {
// 			if(is_numeric($row['Cash']) & $row['Cash'] > 0) {
// 				$player_list[5][] = $row['Cash'];
// 			}
// 		}
// 	}
	
	if(!empty($player_list)) {
		$query = $db->prepare("SELECT Player as Seat, HandID FROM action WHERE UniqueGameID=".$uniqueGameID." AND Action='wins game'");
		$query->execute();
		if($row = $query->fetch(PDO::FETCH_ASSOC)) {
			// game not aborted
			if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
				$player_list[6][$row['Seat']-1] = 1;
				$query_1 = $db->prepare("SELECT Seat_".$row['Seat']."_Card_1 as Card_1, Seat_".$row['Seat']."_Card_2 as Card_2, Seat_".$row['Seat']."_Hand_text as Hand_text FROM hand WHERE UniqueGameID=".$uniqueGameID." AND HandID=".$row['HandID']);
				$query_1->execute();
				if($row_1 = $query_1->fetch(PDO::FETCH_ASSOC)) {
					if(is_numeric($row_1['Card_1']) & $row_1['Card_1']>=0 & $row_1['Card_1']<52 & is_numeric($row_1['Card_2']) & $row_1['Card_2']>=0 & $row_1['Card_2']<52) {
						$player_list[7][$row['Seat']-1] = array();
						$hand_text = $row_1['Hand_text'];
						$end_text = strpos($row_1['Hand_text'],',');
						if(!$end_text) $end_text = length($hand_text);
						$player_list[7][$row['Seat']-1][0] = "[".int2string($row_1['Card_1']).",".int2string($row_1['Card_2'])."] ".substr($hand_text,0,$end_text);
					} else $player_list[7][$row['Seat']-1] = array();
				} else $player_list[7][$row['Seat']-1] = array();
			}
		} else {
			// game aborted
			$query = $db->prepare("SELECT * FROM action WHERE UniqueGameID=".$uniqueGameID." AND Action='wins' AND HandID=".max($player_list[3]));
			$query->execute();
			if($row = $query->fetch(PDO::FETCH_ASSOC)) {			
				// hand is played to the end --> all who don't sits out are going to the next hand
				$query = "
					SELECT Player as Seat
					FROM action
					WHERE UniqueGameID=".$uniqueGameID." AND HandID=".max($player_list[3])." AND Action='sits out'";
				$query = $db->prepare($query);
				$query->execute();
				while($row = $query->fetch(PDO::FETCH_ASSOC)) {
					if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
						$player_list[5][$row['Seat']-1] = 1;
					}
				}
				// no elimination notation for active when game aborted
				$query = "
					SELECT DISTINCT Player as Seat
					FROM action
					WHERE UniqueGameID=".$uniqueGameID." AND HandID=".max($player_list[3]);
				$query = $db->prepare($query);
				$query->execute();
				while($row = $query->fetch(PDO::FETCH_ASSOC)) {
					if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10 & $player_list[5][$row['Seat']-1] != 1) {
						$player_list[7][$row['Seat']-1] = array();
					}
				}
			}
		}
	
			// 	if($game_aborted) {
	// 		$query = $db->prepare("SELECT * FROM action WHERE UniqueGameID=".$uniqueGameID." AND Action='wins' AND HandID=".max($player_list[3]));
	// 		$query->execute();
	// 		// hand is played to the end --> all who don't sits out are going to the next hand
	// 		if($row = $query->fetch(PDO::FETCH_ASSOC)) {			
	// 			$query = "
	// 				SELECT Player as Seat
	// 				FROM action
	// 				WHERE UniqueGameID=".$uniqueGameID." AND HandID=".max($player_list[3])." AND Player NOT IN (
	// 																			SELECT Player
	// 																			FROM action
	// 																			WHERE UniqueGameID=".$uniqueGameID." AND HandID=".max($player_list[3])." AND Action='sits out')
	// 				GROUP BY Player";
	// 			$query = $db->prepare($query);
	// 			$query->execute();
	// 			while($row = $query->fetch(PDO::FETCH_ASSOC)) {
	// 				if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
	// 					$player_list[3][$row['Seat']-1] = $player_list[3][$row['Seat']-1]+1;
	// 				}
	// 			}
	// 		}
	// 	}

		// sort array regarding max action id
		array_multisort($player_list[6],SORT_DESC,$player_list[3],SORT_DESC,$player_list[5],$player_list[4],SORT_DESC,$player_list[0],$player_list[1],$player_list[7]);

		$tmp = 0;
		// evaluate index 2 (ranking)
		for($i=0;$i<count($player_list[0]);$i++) {
			if($player_list[6][$i]==0 & $i<count($player_list[0])-1 & $player_list[3][$i]==$player_list[3][min($i+1,count($player_list[0])-1)] & $player_list[4][$i]==$player_list[4][min($i+1,count($player_list[0])-1)]) {
				$tmp++;
			} else {
				$player_list[2][$i] = $i+1;
				for($j=1;$j<=$tmp;$j++) {
					$player_list[2][$i-$j] = $i+1;
				}
				$tmp = 0;
			}
		}
		
	}

	return $player_list;
}

function get_hand_cash($db,$uniqueGameID) {

	$query = $db->prepare("SELECT Startmoney FROM game WHERE UniqueGameID=".$uniqueGameID);
	$query->execute();
	if($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Startmoney']) & $row['Startmoney']>0) $startmoney = $row['Startmoney'];
	} else {
		$startmoney = -1;
	}

	$query = "SELECT HandID";
	for($i=1;$i<=10;$i++) {
		$query = $query.", Seat_".$i."_Cash";
	}
	$query = $query." FROM hand WHERE UniqueGameID=".$uniqueGameID;
	$query = $db->prepare($query);
	$query->execute();

	$hand_cash[10][0] = 0;

	$j=0;
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		for($i=0;$i<10;$i++) {
			if($row['Seat_'.($i+1).'_Cash']) {
				if(is_numeric($row['Seat_'.($i+1).'_Cash']) & $row['Seat_'.($i+1).'_Cash'] > 0) {
					$hand_cash[$i][$j] = $row['Seat_'.($i+1).'_Cash'];
				}
			} else {
				if($j>0 && $hand_cash[$i][$j-1] > 0) {
					$hand_cash[$i][$j] = 0;
				} else {
					$hand_cash[$i][$j] = -1;
				}
			}
		}
		$j++;
		if(is_numeric($row['HandID']) & $row['HandID'] > 0) $hand_cash[10][$j] = $row['HandID'];
	}
	$sum_cash = 0;
	for($i=0;$i<10;$i++) {
		if($j>0 && $hand_cash[$i][$j-1] > 0) {
			$hand_cash[$i][$j] = 0;
			$sum_cash += $hand_cash[$i][$j-1];
		} else {
			$hand_cash[$i][$j] = -1;
		}
	}
	
	$query = "SELECT Player as Seat FROM action WHERE Action=\"wins game\" AND UniqueGameID=".$uniqueGameID;
	$query = $db->prepare($query);
	$query->execute();
	if($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
			$hand_cash[$row['Seat']-1][$j] = $sum_cash;
		}
	}
        
	return $hand_cash;

}

function get_pot_size($db,$uniqueGameID) {

	$query = "
			SELECT HandID, SUM(Amount) as Pot
			FROM Action
			WHERE (Action='wins' OR Action='wins (side pot)') AND UniqueGameID=".$uniqueGameID."
			GROUP BY HandID";
	$query = $db->prepare($query);
	$query->execute();
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Pot']) & $row['Pot']>0 & is_numeric($row['HandID']) & $row['HandID']>0) {
			$pot_size[0][] = $row['Pot'];
			$pot_size[1][] = $row['HandID'];
		}
	}

	return $pot_size;

}

function get_total_start_cash($db,$uniqueGameID) {

	$query = "SELECT HandID";
	for($i=1;$i<=10;$i++) {
		$query = $query.", Seat_".$i."_Cash";
	}
	$query = $query." FROM hand WHERE UniqueGameID=".$uniqueGameID." AND HandID=1";
	$query = $db->prepare($query);
	$query->execute();
	$start_cash = 0;
	if($row = $query->fetch(PDO::FETCH_ASSOC)) {
		for($i=1;$i<=10;$i++) {
			if(is_numeric($row['Seat_'.$i.'_Cash']) & $row['Seat_'.$i.'_Cash']>0) {
				$start_cash += $row['Seat_'.$i.'_Cash'];
			}
		}
	}

	return $start_cash;

}

function get_blind_steps($db,$uniqueGameID) {

	$query = "
		SELECT MIN(HandID) as HandID, Sb_Amount, Bb_Amount
		FROM hand
		WHERE UniqueGameID=".$uniqueGameID."
		GROUP BY Sb_Amount,Bb_Amount";
	$query = $db->prepare($query);
	$query->execute();
	$blind_steps = array();
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Sb_Amount']) & $row['Sb_Amount']>0 & is_numeric($row['Bb_Amount']) & $row['Bb_Amount']>0 & is_numeric($row['HandID']) & $row['HandID']>0) {
			$blind_steps[] = array($row['Sb_Amount'],$row['Bb_Amount'],$row['HandID']);
		}
	}

	return $blind_steps;

}

function get_best_hands($db,$hand_cash,$count,$uniqueGameID,$regex) {

	// best_hands:
	// 0 --> seat
	// 1 --> player name
	// 2 --> hand text
	// 3 --> hand id
	// 4 --> amount

	$query_1 = "";
	$first_player_found = false;
	for($i=1;$i<=10;$i++) {
		$query_0 = $db->prepare("SELECT Player FROM player WHERE Seat=".$i." AND UniqueGameID=".$uniqueGameID);
		$query_0->execute();
		if($row_0 = $query_0->fetch(PDO::FETCH_ASSOC)) {
			if($first_player_found) $query_1 = $query_1." UNION ";
			else $first_player_found = true;
//			$query_1 = $query_1."SELECT \"".preg_replace($regex,'',$row_0['Player'])."\" as Player, ".$i." as Seat, HandID, Seat_".$i."_Hand_int as Seat_Hand_int, Seat_".$i."_Hand_text as Seat_Hand_text FROM hand WHERE Seat_Hand_text NOT NULL AND UniqueGameID=".$uniqueGameID;
                        $query_1 = $query_1."SELECT \"".replace_spec_char($row_0['Player'])."\" as Player, ".$i." as Seat, HandID, Seat_".$i."_Hand_int as Seat_Hand_int, Seat_".$i."_Hand_text as Seat_Hand_text FROM hand WHERE Seat_Hand_text NOT NULL AND UniqueGameID=".$uniqueGameID;
		}
	}
	$query_1 = $query_1." ORDER BY Seat_Hand_int DESC LIMIT ".$count;
	$query_1 = $db->prepare($query_1);
	$query_1->execute();
	$best_hands = array();
	while($row_1 = $query_1->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row_1['HandID']) & $row_1['HandID']>0 & $row_1['HandID']<count($hand_cash[$row_1['Seat']-1])) {
			$amount = $hand_cash[$row_1['Seat']-1][$row_1['HandID']] - $hand_cash[$row_1['Seat']-1][$row_1['HandID']-1];
			$best_hands[0][] = $row_1['Seat'];
			$best_hands[1][] = $row_1['Player'];
			$best_hands[2][] = preg_replace($regex,'',$row_1['Seat_Hand_text']);
			$best_hands[3][] = $row_1['HandID'];
			$best_hands[4][] = $amount;
		}
	}
	return $best_hands;
}

function get_most_wins($db,$hand_cash,$player_list_hands,$uniqueGameID,$regex) {

	// most_wins
	// 0 --> seat
	// 1 --> player names
	// 2 --> count wins
	// 3 --> count wins relative
	// 4 --> highest win

	$query_1 = "
		SELECT Player, Seat, Count
		FROM (
			SELECT *
			FROM player
			WHERE UniqueGameID=".$uniqueGameID."
		)
		NATURAL LEFT JOIN (
			SELECT Player as Seat, count(*) as Count
			FROM action
			WHERE Action='wins' AND UniqueGameID=".$uniqueGameID."
			GROUP BY Player
		)
		ORDER BY Seat";
	$query_1 = $db->prepare($query_1);
	$query_1->execute();
	while($row_1 = $query_1->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row_1['Seat']) & $row_1['Seat']>0 & $row_1['Seat']<=10) {
			$most_wins[0][] = $row_1['Seat'];
//			$most_wins[1][] = preg_replace($regex,'',$row_1['Player']);
                        $most_wins[1][] = replace_spec_char($row_1['Player']);
			$count = $row_1['Count'];
			if(!($count>0)) $count = 0;
			$most_wins[2][] = $count;
			if($player_list_hands[$row_1['Seat']-1]>0) $most_wins[3][] = $count/$player_list_hands[$row_1['Seat']-1];
			else $most_wins[3][] = 0;
			$query_2 = "
				SELECT HandID
				FROM action
				WHERE Action='wins' AND Player=".$row_1['Seat']." AND UniqueGameID=".$uniqueGameID."
				ORDER BY Amount DESC";
			$query_2 = $db->prepare($query_2);
			$query_2->execute();
			$tmp = array();
			while($row_2 = $query_2->fetch(PDO::FETCH_ASSOC)) {
				if(is_numeric($row_2['HandID']) & $row_2['HandID']>0 & $row_2['HandID']<count($hand_cash[$row_1['Seat']-1])) {
					$tmp[] = $hand_cash[$row_1['Seat']-1][$row_2['HandID']] - $hand_cash[$row_1['Seat']-1][$row_2['HandID']-1];
				}
			}
			if(count($tmp)>0) {
				sort($tmp);
				$most_wins[4][] = array_pop($tmp);
			} else {
				$most_wins[4][] = "&nbsp;";
			}
		}
	}

	array_multisort(
		$most_wins[2],SORT_DESC,
		$most_wins[3],SORT_DESC,
		$most_wins[4],SORT_DESC,
		$most_wins[1],
		$most_wins[0]
	);

	return $most_wins;
}

function get_highest_win($db,$hand_cash,$count,$uniqueGameID,$regex) {

	// most_wins
	// 0 --> seat
	// 1 --> player names
	// 2 --> hand
	// 3 --> side pot?
	// 4 --> amount

	$query = "
		SELECT Player, Seat, HandID, Action
		FROM (
			SELECT *
			FROM player
			WHERE UniqueGameID=".$uniqueGameID."
		)
		NATURAL JOIN (
			SELECT Player as Seat, HandID, Action
			FROM action
			WHERE ( Action='wins' OR Action='wins (side pot)' ) AND UniqueGameID=".$uniqueGameID."
		)";
	$query = $db->prepare($query);
	$query->execute();
	$highest_win = array();
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(preg_replace($regex,'',$row['Action']) == 'wins') $side_pot = false;
		else $side_pot = true;
		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10 & is_numeric($row['HandID']) & $row['HandID']>0 & $row['HandID']<count($hand_cash[$row['Seat']-1])) {
			$amount = $hand_cash[$row['Seat']-1][$row['HandID']] - $hand_cash[$row['Seat']-1][$row['HandID']-1];
			if($amount>0) {
				$highest_win[0][] = $row['Seat'];
//				$highest_win[1][] = preg_replace($regex,'',$row['Player']);
                                $highest_win[1][] = replace_spec_char($row['Player']);
				$highest_win[2][] = $row['HandID'];
				$highest_win[3][] = $side_pot;
				$highest_win[4][] = $amount;
			}
		}
	}

	if(!empty($highest_win)) {
		array_multisort(
			$highest_win[4],SORT_DESC,
			$highest_win[2],
			$highest_win[0],
			$highest_win[1],
			$highest_win[3]
		);
		$highest_win[0] = array_slice($highest_win[0],0,$count);
	}

	return $highest_win;

}

function get_longest_series_win($db,$hand_cash,$uniqueGameID,$regex) {

	// longest serie win:
	// 0 --> seat
	// 1 --> player name
	// 2 --> serie length
	// 3 --> start hand
	// 4 --> end hand
	// 5 --> amount

	$query = "
		SELECT Player, Seat, HandID
		FROM (
			SELECT *
			FROM player
			WHERE UniqueGameID=".$uniqueGameID."
		)
		LEFT JOIN (
			SELECT HandID, Player as Seat
			FROM action
			WHERE Action='wins' AND UniqueGameID=".$uniqueGameID."
		) USING (Seat)
		WHERE HandID NOT NULL
		ORDER BY HandID";
	$query = $db->prepare($query);
	$query->execute();
	$tmp_data = array(0,0,0,0);
	$serie = 1;
	$amount = 0;
	$start_hand = 0;
	$longest_series_win = array();

	while($row = $query->fetch(PDO::FETCH_ASSOC)) {

		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10 & is_numeric($row['HandID']) & $row['HandID']>0) {

			if($tmp_data[0] != 0) {
				if($row['Seat'] == $tmp_data[1]) {
					if($serie==1) $start_hand = $tmp_data[0];
					$serie++;
					$amount+=$tmp_data[3];
				} else {
					if($serie>1) {
						$longest_series_win[0][] = $tmp_data[1];
						$longest_series_win[1][] = $tmp_data[2];
						$longest_series_win[2][] = $serie;
						$longest_series_win[3][] = $start_hand;
						$longest_series_win[4][] = $tmp_data[0];
						$longest_series_win[5][] = $amount+$tmp_data[3];
						$serie = 1;
						$amount = 0;
						$start_hand = 0;
					}
				}
			}
			if($row['HandID']<count($hand_cash[$row['Seat']-1])) {
				$amount_tmp = $hand_cash[$row['Seat']-1][$row['HandID']] - $hand_cash[$row['Seat']-1][$row['HandID']-1];
			} else {
				$amount_tmp = 0;
			}
//			$tmp_data = array($row['HandID'],$row['Seat'],preg_replace($regex,'',$row['Player']),$amount_tmp);
                        $tmp_data = array($row['HandID'],$row['Seat'],replace_spec_char($row['Player']),$amount_tmp);

		} else {
			break;
		}
	}
	if($serie>1) {
		$longest_series_win[0][] = $tmp_data[1];
		$longest_series_win[1][] = $tmp_data[2];
		$longest_series_win[2][] = $serie;
		$longest_series_win[3][] = $start_hand;
		$longest_series_win[4][] = $tmp_data[0];
		$longest_series_win[5][] = $amount+$tmp_data[3];
	}

	if(!empty($longest_series_win)) {
		array_multisort(
			$longest_series_win[2],SORT_DESC,
			$longest_series_win[5],SORT_DESC,
			$longest_series_win[0],
			$longest_series_win[1],
			$longest_series_win[3],
			$longest_series_win[4]
		);
	}

	return $longest_series_win;

}

function get_longest_series_loose($db,$player_list,$hand_cash,$uniqueGameID) {

	// longest serie loose:
	// 0 --> seat
	// 1 --> player name
	// 2 --> serie length
	// 3 --> start hand
	// 4 --> end hand
	// 5 --> amount

	$longest_serie_loose = array();
	for($i=0;$i<count($player_list[0]);$i++) {
		$query = "SELECT HandID FROM hand WHERE HandID NOT IN ( SELECT HandID FROM action WHERE ( Action='wins' OR Action='wins (side pot)' ) AND UniqueGameID=".$uniqueGameID." AND Player=".$player_list[0][$i]." ) AND UniqueGameID=".$uniqueGameID." ORDER BY HandID";
		$query = $db->prepare($query);
		$query->execute();
		$handID_tmp = -1;
		$serie = 1;
		$amount = 0;
		while($row = $query->fetch(PDO::FETCH_ASSOC)) {
			if(is_numeric($row['HandID']) & $row['HandID']>0) {
				if($row['HandID']>$player_list[3][$i]) break;
				if($row['HandID'] == $handID_tmp + 1) {
					if($serie==1) {
						$start_hand = $handID_tmp;
					}
					$end_hand = $row['HandID'];
					$serie++;
				} else {
					if($serie > 1) {
						// end of serie
						$longest_serie_loose[0][] = $player_list[0][$i];
						$longest_serie_loose[1][] = $player_list[1][$i];
						$longest_serie_loose[2][] = $serie;
						$longest_serie_loose[3][] = $start_hand;
						$longest_serie_loose[4][] = $end_hand;
						$longest_serie_loose[5][] = $hand_cash[$player_list[0][$i]-1][$start_hand-1] - $hand_cash[$player_list[0][$i]-1][$end_hand];
						$serie = 1;
						$amount = 0;
					}
				}
				$handID_tmp = $row['HandID'];
			}
		}
		if($serie > 1) {
			// end of serie
			$longest_serie_loose[0][] = $player_list[0][$i];
			$longest_serie_loose[1][] = $player_list[1][$i];
			$longest_serie_loose[2][] = $serie;
			$longest_serie_loose[3][] = $start_hand;
			$longest_serie_loose[4][] = $end_hand;
			$longest_serie_loose[5][] = max(0,$hand_cash[$player_list[0][$i]-1][$start_hand-1]) - max(0,$hand_cash[$player_list[0][$i]-1][$end_hand]);
			$serie = 1;
			$amount = 0;
		}
	}

	if(!empty($longest_serie_loose)) {
		array_multisort(
			$longest_serie_loose[2],SORT_DESC,
			$longest_serie_loose[5],SORT_DESC,
			$longest_serie_loose[0],
			$longest_serie_loose[1],
			$longest_serie_loose[3],
			$longest_serie_loose[4]
		);
	}

	return $longest_serie_loose;

}


function get_most_raise($db,$player_list_seat,$player_list_name,$player_list_hand,$uniqueGameID) {

	// most_raise:
	// 0 --> seat
	// 1 --> player name
	// 2 --> raise count total
	// 3 --> raise count rel.

// 	$query = $db->prepare("DROP TABLE IF EXISTS tmp_action1");
// 	$query->execute();
// 	$query = $db->prepare("DROP TABLE IF EXISTS tmp_action2");
// 	$query->execute();
// 	$query = "
// 		CREATE TABLE tmp_action1 AS 
// 		SELECT BeRo as BeRo_akt,Player,Amount as Amount_akt, (
// 			SELECT COUNT(*)
// 			FROM (
// 				SELECT ActionID
// 				FROM action
// 				WHERE Amount NOT NULL AND UniqueGameID=".$uniqueGameID."
// 			) AS a2
// 			WHERE a2.ActionID <= a1.ActionID
// 		)-1 AS newActionID
// 		FROM action AS a1
// 		WHERE Amount NOT NULL AND (Action='bets' OR Action='is all in with') AND UniqueGameID=".$uniqueGameID;
// 	print_r($query);
// 	print_r("<br>");
// 	$query = $db->prepare($query);
// 	$query->execute();
// 	$query = "
// 		CREATE TABLE tmp_action2 AS
// 		SELECT BeRo as BeRo_alt,Amount as Amount_alt, (
// 			SELECT COUNT(*)
// 			FROM (
// 				SELECT ActionID
// 				FROM action
// 				WHERE Amount NOT NULL AND UniqueGameID=".$uniqueGameID."
// 			) AS a2
// 			WHERE a2.ActionID <= a1.ActionID
// 		) AS newActionID
// 		FROM action AS a1
// 		WHERE Amount NOT NULL AND UniqueGameID=".$uniqueGameID;
// // 	print_r($query);
// // 	print_r("<br>");
// 	$query = $db->prepare($query);
// 	$query->execute();
// 	$query = "
// 		SELECT Player,Seat,Anzahl
// 		FROM (
// 			SELECT Player,Seat
// 			FROM player
// 			WHERE UniqueGameID=".$uniqueGameID."
// 		) NATURAL LEFT JOIN (
// 			SELECT BeRo_akt-BeRo_alt as BeRo_diff,Player as Seat,Amount_akt-Amount_alt as Amount_diff, COUNT(*) as Anzahl
// 			FROM tmp_action1
// 			NATURAL JOIN tmp_action2
// 			WHERE BeRo_diff=0 AND Amount_diff>0
// 			GROUP BY Player
// 		)
// 		ORDER BY Seat";
// // 	print_r($query);
// // 	print_r("<br>");
// 	$query = $db->prepare($query);
// 	$query->execute();
// 	$most_raise = array();
// 	$i=0;
// 	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
// 		$most_raise[0][] = $row['Seat'];
// 		$most_raise[1][] = $row['Player'];
// 		$anzahl = $row['Anzahl'];
// 		if(!$anzahl>0) $anzahl = 0;
// 		$most_raise[2][] = $anzahl;
// 		if($player_list_hand[$i]>0) $most_raise[3][] = $anzahl/$player_list_hand[$i];
// 		else  $most_raise[3][] = 0;
// 		$i++;
// 	}
// 	$query = $db->prepare("DROP TABLE IF EXISTS tmp_action1");
// 	$query->execute();
// 	$query = $db->prepare("DROP TABLE IF EXISTS tmp_action2");
// 	$query->execute();
// 
// 	array_multisort(
// 		$most_raise[2],SORT_DESC,
// 		$most_raise[3],SORT_DESC,
// 		$most_raise[0],
// 		$most_raise[1]
// 	);

	$query = "
		SELECT Seat, HandID, BeRo, Amount, Bet
		FROM (
			SELECT Seat
			FROM player
			WHERE UniqueGameID=".$uniqueGameID."
		) NATURAL JOIN (
			SELECT HandID, BeRo, Player as Seat, Amount,Action='bets' OR Action='is all in with' as Bet
			FROM action
			WHERE Amount NOT NULL AND UniqueGameID=".$uniqueGameID."
			ORDER BY ActionID
		)";
	$query = $db->prepare($query);
	$query->execute();
	$most_raise = array();
	$most_raise[0] = $player_list_seat;
	$most_raise[1] = $player_list_name;
	$most_raise[2] = array();
	$oldHandID = -1;
	$oldBeRo = -1;
	$oldAmount = -1;
	$aborted = false;
	for($i=0;$i<count($player_list_seat);$i++) {
		$most_raise[2][$i] = 0;
	}
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['HandID']) & $row['HandID']>0 & is_numeric($row['BeRo']) & $row['BeRo']>=0 & $row['BeRo']<=4 & is_numeric($row['Amount']) & $row['Amount']>=0 & is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
			if($row['Bet'] && $row['HandID']==$oldHandID && $row['BeRo']==$oldBeRo && $row['Amount']>$oldAmount) {
				if($row['Seat'] > 0) {
					$most_raise[2][$row['Seat']-1]++;
				} else {
					$aborted = true;
					break;
				}
			}
			$oldHandID = $row['HandID'];
			$oldBeRo = $row['BeRo'];
			$oldAmount = $row['Amount'];
		}
	}

	$most_raise[3] = array();
	for($i=0;$i<count($player_list_seat);$i++) {
		if($player_list_hand[$i]>0) $most_raise[3][$i] = $most_raise[2][$i]/$player_list_hand[$i];
		else $most_raise[3][$i] = 0;
	}

	array_multisort(
		$most_raise[2],SORT_DESC,
		$most_raise[3],SORT_DESC,
		$most_raise[0],
		$most_raise[1]
	);

	if($aborted) return array();
	return $most_raise;
}

function get_most_all_in($db,$uniqueGameID,$regex) {
	
	// most_all_in
	// 0 --> seat
	// 1 --> player name
	// 2 --> total count
	// 3 --> in preflop
	// 4 --> in first 5 hands
	// 5 --> cnt won

	$most_all_in = array();

	$query = "
		SELECT Player, Seat, Count, Count_Preflop, Count_5_Hands, Count_Won
		FROM (
			SELECT *
			FROM (
				SELECT *
				FROM (
					SELECT *
					FROM (
						SELECT Player, Seat
						FROM player
						WHERE UniqueGameID=".$uniqueGameID."
					) NATURAL LEFT JOIN (
						SELECT Player as Seat, count(*) as Count
						FROM action
						WHERE Action='is all in with' AND UniqueGameID=".$uniqueGameID."
						GROUP BY Player
					)
				) NATURAL LEFT JOIN (
					SELECT Player as Seat, count(*) as Count_Preflop
					FROM action
					WHERE Action='is all in with' AND BeRo=0 AND UniqueGameID=".$uniqueGameID."
					GROUP BY Player
				)
			) NATURAL LEFT JOIN (
				SELECT Player as Seat, count(*) as Count_5_Hands
				FROM action
				WHERE Action='is all in with' AND HandID<=5 AND UniqueGameID=".$uniqueGameID."
				GROUP BY Player
			)
		) NATURAL LEFT JOIN (
			SELECT Player as Seat, SUM(won) as Count_Won
			FROM (
				SELECT tmp2.HandID, tmp2.Player, tmp1.Amount>tmp2.Amount as won
				FROM (
					SELECT HandID, Player, Amount
					FROM action
					WHERE (Action='wins' OR Action='wins (side pot)') AND UniqueGameID=".$uniqueGameID."
				) as tmp1
				LEFT JOIN (
					SELECT HandID, Player, Amount
					FROM action
					WHERE Action='is all in with' AND UniqueGameID=".$uniqueGameID."
				) as tmp2 ON tmp1.HandID=tmp2.HandID AND tmp1.Player=tmp2.Player AND won=1
			)
			WHERE HandID NOT NULL
			GROUP BY Player
		)
		ORDER BY Count DESC, Count_Won DESC, Count_Preflop, Count_5_Hands";
	$query = $db->prepare($query);
	$query->execute();
	while($row = $query->fetch(PDO::FETCH_ASSOC)) {
		if(is_numeric($row['Seat']) & $row['Seat']>0 & $row['Seat']<=10) {
			$most_all_in[0][] = $row['Seat'];
//			$most_all_in[1][] = preg_replace($regex,'',$row['Player']);
                        $most_all_in[1][] = replace_spec_char($row['Player']);
			$count = $row['Count'];
			if(!($count>0)) $count = 0;
			$count_preflop = $row['Count_Preflop'];
			if(!($count_preflop>0)) $count_preflop = 0;
			$count_5_hands = $row['Count_5_Hands'];
			if(!($count_5_hands>0)) $count_5_hands = 0;
			$count_won = $row['Count_Won'];
			if(!($count_won>0)) $count_won = 0;
                        // workaround for all in with blinds
                        $query_1 = "
                            SELECT *, RoundStartCash-BlindAmount as Amount_Diff
                            FROM (
                                SELECT HandID, Amount as BlindAmount
                                FROM Action 
                                WHERE Player=".$row['Seat']." AND UniqueGameID=".$uniqueGameID." AND (Action='posts small blind' OR Action='posts big blind')
                            ) NATURAL LEFT JOIN (
                                SELECT Seat_".$row['Seat']."_Cash as RoundStartCash, HandID
                                FROM Hand
                                WHERE UniqueGameID=".$uniqueGameID."
                            ) NATURAL LEFT JOIN (
                                SELECT HandID, Action
                                FROM Action
                                WHERE Player=".$row['Seat']." AND (Action='wins' OR Action='wins (side pot)') AND UniqueGameID=".$uniqueGameID."
                            )";
                        $query_1 = $db->prepare($query_1);
                        $query_1->execute();
                        while($row_1 = $query_1->fetch(PDO::FETCH_ASSOC)) {
                            if(is_numeric($row_1['HandID']) & $row_1['HandID']>0 & is_numeric($row_1['Amount_Diff'])) {
                                if($row_1['Amount_Diff']==0) {
                                    $count++;
                                    $count_preflop++;
                                    if($row_1['HandID']<=5) $count_5_hands++;
                                    if(!is_null($row_1['Action'])) $count_won++;
                                }
                            }
                        }
			$most_all_in[2][] = $count;
			$most_all_in[3][] = $count_preflop;
			$most_all_in[4][] = $count_5_hands;
			$most_all_in[5][] = $count_won;
		}
	}

	return $most_all_in;

}

function replace_spec_char($string) {
    
    $string = htmlentities($string, ENT_QUOTES);
    $string = preg_replace('/[?]/','&#063;',$string);
    $string = preg_replace('/[:]/','&#058;',$string);
    $string = preg_replace('/[=]/','&#061;',$string);
    $string = preg_replace('/[{]/','&#123;',$string);
    $string = preg_replace('/[}]/','&#125;',$string);
    
    return $string;
}

function int2string($int) {
	
	switch ($int%13) {
		case 0: $string = "2"; break;
		case 1: $string = "3"; break;
		case 2: $string = "4"; break;
		case 3: $string = "5"; break;
		case 4: $string = "6"; break;
		case 5: $string = "7"; break;
		case 6: $string = "8"; break;
		case 7: $string = "9"; break;
		case 8: $string = "T"; break;
		case 9: $string = "J"; break;
		case 10: $string = "Q"; break;
		case 11: $string = "K"; break;
		case 12: $string = "A"; break;
		default: $string = ""; break;
	}
	
	switch (floor($int/13)) {
		case 0: $string = $string."<span style='font-size:13px'>&diams;</span>"; break;
		case 1: $string = $string."<span style='font-size:13px'>&hearts;</span>"; break;
		case 2: $string = $string."<span style='font-size:13px'>&spades;</span>"; break;
		case 3: $string = $string."<span style='font-size:13px'>&clubs;</span>"; break;
	}
	
	return $string;
}

?>